import requests
from sqlalchemy.orm import Session
from database.models import NCM
from services.mercadolivre_service import buscar_produto_por_gtin
from services.openai_service import gerar_sugestao_ncm

SISCOMEX_NCM_URL = "https://api.portalunico.siscomex.gov.br/classif/ncm/"

def obter_ncm(db: Session, gtin: str, descricao: str) -> str:
    """
    Busca o c√≥digo NCM de um produto, priorizando as seguintes fontes:
    1Ô∏è‚É£ Banco de Dados local (economia de requisi√ß√µes)
    2Ô∏è‚É£ Mercado Livre (via GTIN)
    3Ô∏è‚É£ API do Portal √önico Siscomex (via Descri√ß√£o)
    4Ô∏è‚É£ OpenAI para refinamento se ainda n√£o encontrado
    5Ô∏è‚É£ Salva no banco se um novo NCM for encontrado
    """

    # üîé 1Ô∏è‚É£ Buscar primeiro no banco de dados
    ncm_existente = db.query(NCM).filter(NCM.descricao == descricao).first()
    if ncm_existente:
        return ncm_existente.ncm  # Retorna diretamente do banco se j√° existir

    # üîé 2Ô∏è‚É£ Buscar no Mercado Livre via GTIN
    produto = buscar_produto_por_gtin(gtin)
    if produto and produto.get("ncm"):
        salvar_ncm(db, descricao, produto["ncm"])
        return produto["ncm"]

    # üîé 3Ô∏è‚É£ Buscar na API do Siscomex pela descri√ß√£o do produto
    resposta = requests.get(f"{SISCOMEX_NCM_URL}?descricao={descricao}")
    if resposta.status_code == 200:
        dados = resposta.json()
        if dados and "codigo" in dados[0]:  # Verifica se a resposta cont√©m um NCM v√°lido
            ncm = dados[0]["codigo"]
            salvar_ncm(db, descricao, ncm)
            return ncm

    # üîé 4Ô∏è‚É£ Refinamento com OpenAI caso n√£o tenha encontrado um NCM v√°lido
    ncm_gerado = gerar_sugestao_ncm(descricao)
    salvar_ncm(db, descricao, ncm_gerado)
    return ncm_gerado

def salvar_ncm(db: Session, descricao: str, ncm: str):
    """Salva o c√≥digo NCM no banco de dados"""
    novo_ncm = NCM(descricao=descricao, ncm=ncm)
    db.add(novo_ncm)
    db.commit()
