from pydantic_settings import BaseSettings
from dotenv import load_dotenv
import os

# üîÑ Carregar vari√°veis do .env
load_dotenv()

class Settings(BaseSettings):
    """Configura√ß√µes principais do sistema"""

    # üì¶ Banco de Dados
    DATABASE_URL: str = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        raise ValueError("‚ö†Ô∏è DATABASE_URL n√£o foi definida no ambiente!")

    # üîó APIs Externas
    OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY")
    BLING_API_KEY: str = os.getenv("BLING_API_KEY")
    ML_CLIENT_ID: str = os.getenv("ML_CLIENT_ID")
    ML_CLIENT_SECRET: str = os.getenv("ML_CLIENT_SECRET")
    ML_REDIRECT_URI: str = os.getenv("ML_REDIRECT_URI")

    # ‚ö° Redis e Celery
    REDIS_URL: str = os.getenv("REDIS_URL")
    CELERY_BROKER_URL: str = os.getenv("CELERY_BROKER_URL", REDIS_URL)
    CELERY_RESULT_BACKEND: str = os.getenv("CELERY_RESULT_BACKEND", REDIS_URL)
    
    if not REDIS_URL:
        raise ValueError("‚ö†Ô∏è REDIS_URL n√£o foi definida no ambiente!")

    # üîê Seguran√ßa
    SECRET_KEY: str = os.getenv("SECRET_KEY")
    if not SECRET_KEY:
        raise ValueError("‚ö†Ô∏è SECRET_KEY n√£o foi definida no ambiente!")

    JWT_ALGORITHM: str = os.getenv("JWT_ALGORITHM", "HS256")
    JWT_EXPIRATION_MINUTES: int = int(os.getenv("JWT_EXPIRATION_MINUTES", 60))

    class Config:
        """Configura√ß√µes adicionais do Pydantic"""
        case_sensitive = True

# üî• Inicializa as configura√ß√µes carregadas do ambiente
settings = Settings()
